diff --git a/gcc/config/i386/predicates.md b/gcc/config/i386/predicates.md
index 8f250a2..7df1397 100644
--- a/gcc/config/i386/predicates.md
+++ b/gcc/config/i386/predicates.md
@@ -1657,3 +1657,14 @@
   (ior (match_operand 0 "register_operand")
        (and (match_code "const_int")
 	    (match_test "op == constm1_rtx"))))
+
+;; Return true if OP is a memory_operand, including volatile MEM.
+(define_predicate "volatile_memory_operand"
+  (match_code "mem,subreg")
+{
+  int save_volatile_ok = volatile_ok;
+  volatile_ok = 1;
+  bool ret = memory_operand (op, mode);
+  volatile_ok = save_volatile_ok;
+  return ret;
+})
diff --git a/gcc/config/i386/sync.md b/gcc/config/i386/sync.md
index 29b82f8..5213330 100644
--- a/gcc/config/i386/sync.md
+++ b/gcc/config/i386/sync.md
@@ -212,6 +212,17 @@
   DONE;
 })
 
+(define_insn_and_split "*atomic_loaddf_fpu"
+  [(set (match_operand:DF 0 "nonimmediate_operand" "=x,f")
+	(subreg:DF (unspec:DI [(match_operand:DI 1 "volatile_memory_operand"
+						   "m,m")]
+			      UNSPEC_LDA) 0))]
+  "!TARGET_64BIT && (TARGET_80387 || TARGET_SSE)"
+  "#"
+  "&& reload_completed"
+  [(set (match_dup 0) (match_dup 1))]
+  "operands[1] = gen_lowpart (DFmode, operands[1]);")
+
 (define_peephole2
   [(set (match_operand:DF 0 "fp_register_operand")
 	(unspec:DF [(match_operand:DI 1 "memory_operand")]
@@ -329,6 +340,59 @@
   DONE;
 })
 
+(define_split
+  [(set (match_operand:DI 0 "memory_operand")
+	(unspec:DI [(subreg:DI (match_operand:DF 1 "nonimmediate_operand") 0)]
+		   UNSPEC_STA))
+   (clobber (match_operand:DI 2 "memory_operand"))
+   (clobber (match_scratch:DF 3))]
+  "!TARGET_64BIT && TARGET_80387 && !reload_completed"
+  [(parallel [(set (match_dup 0) (unspec:DI [(match_dup 1)] UNSPEC_STA))
+	      (clobber (match_dup 2))
+	      (clobber (match_dup 3))])])
+
+(define_insn_and_split "*atomic_storedf_fpu"
+  [(set (match_operand:DI 0 "memory_operand" "=m,m,m,m")
+	(unspec:DI [(match_operand:DF 1 "nonimmediate_operand" "x,f,m,?r")]
+		   UNSPEC_STA))
+   (clobber (match_operand:DI 2 "memory_operand" "=X,X,X,m"))
+   (clobber (match_scratch:DF 3 "=X,X,xf,xf"))]
+  "!TARGET_64BIT && TARGET_80387"
+  "#"
+  "&& reload_completed"
+  [(const_int 0)]
+{
+  rtx dst = operands[0], src = operands[1];
+  rtx mem = operands[2], tmp = operands[3];
+
+  if (!SSE_REG_P (src) && !STACK_REG_P (src))
+    {
+      src = gen_lowpart (DImode, src);
+      if (REG_P (src))
+	{
+	  emit_move_insn (mem, src);
+	  src = mem;
+	}
+
+      if (STACK_REG_P (tmp))
+	{
+	  emit_insn (gen_loaddi_via_fpu (tmp, src));
+	  emit_insn (gen_storedi_via_fpu (dst, tmp));
+	  DONE;
+	}
+      else
+	{
+	  adjust_reg_mode (tmp, DImode);
+	  emit_move_insn (tmp, src);
+	  src = tmp;
+	}
+    }
+  else
+    dst = gen_lowpart (DFmode, dst);
+  emit_move_insn (dst, src);
+  DONE;
+})
+
 (define_peephole2
   [(set (match_operand:DF 0 "memory_operand")
 	(match_operand:DF 1 "fp_register_operand"))
