diff --git a/src/google/protobuf/map.h b/src/google/protobuf/map.h
index 40f35e92..1af91f9c 100644
--- a/src/google/protobuf/map.h
+++ b/src/google/protobuf/map.h
@@ -425,10 +425,10 @@ class Map {
         node_ = NULL;
         for (bucket_index_ = start_bucket; bucket_index_ < m_->num_buckets_;
              bucket_index_++) {
-          if (m_->TableEntryIsNonEmptyList(bucket_index_)) {
+          if ((*m_).TableEntryIsNonEmptyList(bucket_index_)) {
             node_ = static_cast<Node*>(m_->table_[bucket_index_]);
             break;
-          } else if (m_->TableEntryIsTree(bucket_index_)) {
+          } else if ((*m_).TableEntryIsTree(bucket_index_)) {
             Tree* tree = static_cast<Tree*>(m_->table_[bucket_index_]);
             GOOGLE_DCHECK(!tree->empty());
             node_ = NodePtrFromKeyPtr(*tree->begin());
@@ -487,7 +487,7 @@ class Map {
           return true;
         // Less common: the bucket is a linked list with node_ somewhere in it,
         // but not at the head.
-        if (m_->TableEntryIsNonEmptyList(bucket_index_)) {
+        if ((*m_).TableEntryIsNonEmptyList(bucket_index_)) {
           Node* l = static_cast<Node*>(m_->table_[bucket_index_]);
           while ((l = l->next) != NULL) {
             if (l == node_) {
@@ -501,7 +501,7 @@ class Map {
         // find-like method that compares Node* instead of const Key&.
         iterator_base i(m_->find(*KeyPtrFromNodePtr(node_), it));
         bucket_index_ = i.bucket_index_;
-        return m_->TableEntryIsList(bucket_index_);
+        return (*m_).TableEntryIsList(bucket_index_);
       }
 
       Node* node_;
