name       : pytorch-cuda
version    : 1.1.0
release    : 5
source     :
    - git|https://github.com/pytorch/pytorch : v1.1.0
license    : BSD-3-Clause
component  : programming.python
summary    :
    - Tensors and Dynamic neural networks in Python with strong GPU acceleration
    - devel : PyTorch C++ API
description: |
    PyTorch is an optimized tensor library for deep learning using GPUs and CPUs
networking : yes
patterns   :
    - devel :
        - /usr/lib64 # Install /usr/lib64/lib*.so.* to the devel subpackage
builddeps  :
    - pkgconfig(eigen3)
    - pkgconfig(gflags)
    - pkgconfig(libavcodec)
    - pkgconfig(libglog)
    - pkgconfig(libzmq)
    - pkgconfig(ompi)
    - pkgconfig(openblas)
    - pkgconfig(opencv)
    - pkgconfig(protobuf)
    - pkgconfig(python3)
    - leveldb-devel
    - lmdb-devel
    - numpy
    - python-typing
    - pyyaml
    - snappy-devel
    - nvidia-glx-driver-common
    - pkgconfig(cuda)
    - pkgconfig(cudnn)
    - pkgconfig(nccl)
    - tensorrt-devel
rundeps    :
    - numpy
    - python-cffi
    - pyyaml
conflicts  :
    - pytorch
    - devel :
        - pytorch-devel
setup      : |
    %patch -p1 < $pkgfiles/build_flags.patch
build      : |
    export CFLAGS=${CFLAGS//"-mtune=generic -march=x86-64"/"-mtune=haswell -march=haswell"}

    export CUDA_HOME=%libdir%/cuda
    export TORCH_CUDA_ARCH_LIST="6.1"

    export BLAS=OpenBLAS
    export BUILD_BINARY=1
    export USE_FFMPEG=1
    export USE_LEVELDB=1
    export USE_LMDB=1
    export USE_OPENCV=1 # Might need opencv to be compiled with CUDA support. Leave it as is for now.
    export USE_GFLAGS=1
    export USE_GLOG=1
    export USE_ZMQ=1
    export USE_MKLDNN=0

    # export USE_TENSORRT=ON
    # Why not tensorrt?
    # If I patch the nvcc.profile by adding the "LIBRARIES" line, I see the error messages as reported here:
    # https://github.com/pytorch/pytorch/issues/18524
    # This might also be helpful:
    # https://gitlab.kitware.com/cmake/cmake/issues/17776
    # https://github.com/negativo17/cuda/issues/9

    %python3_setup
install    : |
    %python3_install --skip-build

    install -dm00755 $installdir/usr/bin $installdir/usr/include $installdir/%libdir%/cmake
    TORCH_PATH=$(python3 -c "import site; print(site.getsitepackages()[0])")/torch
    for f in $installdir/$TORCH_PATH/bin/*; do
        ln -sv $TORCH_PATH/bin/`basename $f` $installdir/usr/bin
    done
    # Configure libtorch
    for f in $installdir/$TORCH_PATH/share/cmake/*; do
        ln -sv $TORCH_PATH/share/cmake/`basename $f` $installdir/%libdir%/cmake
    done
    for f in $installdir/$TORCH_PATH/include/*; do
        ln -sv $TORCH_PATH/include/`basename $f` $installdir/usr/include
    done
    for f in $installdir/$TORCH_PATH/lib/lib*.so*; do
        ln -sv $TORCH_PATH/lib/`basename $f` $installdir/%libdir%
    done
